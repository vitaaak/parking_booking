package com.kurgan.kursach.controllers;import com.kurgan.kursach.Validator.UserValidator;import com.kurgan.kursach.models.User;import com.kurgan.kursach.service.SecurityService;import com.kurgan.kursach.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;@Controller@RequestMapping("")public class UserController {    @Autowired    private UserService userService;    @Autowired    private SecurityService securityService;    @Autowired    private UserValidator userValidator;    @GetMapping("/registration")    public String registration(Model model){        model.addAttribute("userForm", new User());        return "registration";    }    @PostMapping("/registration")    public String registration(@ModelAttribute("userForm") User userForm, BindingResult bindingResult, Model model){        userValidator.validate(userForm, bindingResult);        if(bindingResult.hasErrors()){            return "registration";        }        userService.save(userForm);        securityService.autoLogin(userForm.getUsername(), userForm.getConfirmPassword());        return "login";    }    @GetMapping("/login")    public String login(Model model, String error, String logout){        if (error != null){            model.addAttribute("error", "Проверьте логин или пароль");        }        return "login";    }    @PostMapping("/login")    public String login(){        return "redirect:/welcome";    }    @GetMapping({"/", "/welcome"})    public String welcome(Model model){        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String currentPrincipalName = authentication.getName();        String name = "Таинственный гость";        boolean is_authenticated = false;        if (!currentPrincipalName.equals("anonymousUser")){            name = currentPrincipalName;            is_authenticated = true;        }        model.addAttribute("name", name);        model.addAttribute("is_authenticated", is_authenticated);        return "welcome";    }}