package com.kurgan.kursach.controllers;import com.kurgan.kursach.Visitor.Visitor;import com.kurgan.kursach.models.Car;import com.kurgan.kursach.models.Card;import com.kurgan.kursach.models.Parking;import com.kurgan.kursach.models.User;import com.kurgan.kursach.service.CarService;import com.kurgan.kursach.service.CardService;import com.kurgan.kursach.service.ParkingService;import com.kurgan.kursach.service.UserService;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import javax.servlet.http.HttpServletRequest;import java.io.UnsupportedEncodingException;import java.util.ArrayList;import java.util.Base64;import java.util.List;@Controller@RequestMapping("/main")public class MainController {    @Autowired    private UserService userService;    @Autowired    private CarService carService;    @Autowired    private CardService cardService;    @Autowired    private ParkingService parkingService;    @GetMapping("/add_car")    public String addCar(Model model) {        return "main/add_car";    }    @PostMapping("/add_car")    public String addCar(@ModelAttribute("addForm") Car car) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        car.setUser(userService.findByUsername(authentication.getName()));        carService.save(car);        return "redirect:/";    }    @GetMapping("/car/manage")    public String manageCar(Model model){        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        model.addAttribute("cars", userService.findByUsername(username).getCars());        return "main/cars";    }    @PostMapping("/car/udpate/{id}")    public String updateCar(@PathVariable("id") Long id, @ModelAttribute("number") String number){        Car car = carService.findById(id);        car.setNumber(number);        carService.save(car);        return "redirect:/main/car/manage";    }    @PostMapping("car/delete/{id}")    public String deleteCar(@PathVariable("id") Long id){        carService.deleteById(id);        return "redirect:/main/car/manage";    }    @GetMapping("/account")    public String manageAccount(Model model) throws UnsupportedEncodingException {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        User user = userService.findByUsername(username);        Card card = null;        if (user.getCard() != null){            card = user.getCard();        }        if (!username.equals("anonymousUser")) {            model.addAttribute("name", user.getName());            model.addAttribute("surname", user.getSurname());            model.addAttribute("mail", user.getMail());            if(card != null){                model.addAttribute("discount", card.getDiscount());                model.addAttribute("code", user.getCard().getCard_code());            }            else {                model.addAttribute("discount", "no");                model.addAttribute("code", "no");            }            if (user.getImage() != null) {                model.addAttribute("avatar", addImage(user.getImage()));            } else {                model.addAttribute("avatar", null);            }        }        return "main/account";    }    @GetMapping("/canvas")    public String getCanvas(Model model){        List<String> parkings = new ArrayList<>();        List<Integer> numParkings = new ArrayList<>();        List<String> sets = new ArrayList<>();        List<Integer> numSetDishes = new ArrayList<>();        for (Parking parking: parkingService.findAll()) {            parkings.add(parking.getAddress());            numParkings.add(parking.visit(new Visitor()));        }        model.addAttribute("numParkings", numParkings);        model.addAttribute("parkings", parkings);        return "main/canva";    }    @PostMapping("/account")    public String manageAccount(@ModelAttribute("updateForm") User user, @ModelAttribute("file") MultipartFile file,                                HttpServletRequest request) {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        User updatedUser = userService.findByUsername(username);        updatedUser.setName(user.getName());        updatedUser.setSurname(user.getSurname());        updatedUser.setMail(user.getMail());        if (!file.isEmpty()) {            try {                byte[] bytes = file.getBytes();                updatedUser.setImage(bytes);            } catch (Exception e) {                System.out.println(e);            }        }        userService.update(updatedUser);        String referer = request.getHeader("Referer");        return "redirect:/main/account";    }    @PostMapping("/card")    public String addCard(@ModelAttribute("code") String code, HttpServletRequest request){        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        String username = authentication.getName();        User user = userService.findByUsername(username);        Card card = null;        for(Card bufCard : cardService.findAll()){            if(bufCard.getCard_code().equals(code)){                card = bufCard;            }        }        user.setCard(card);        userService.update(user);        String referer = request.getHeader("Referer");        return "redirect:" + referer;    }    @PostMapping("/entry")    public String adminEntry() {        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();        if (authentication.getAuthorities().stream().anyMatch(r -> r.getAuthority().equals("ROLE_ADMIN"))) {            return "redirect:../admin/main";        } else {            return "redirect:../main/account";        }    }    private String addImage(byte[] bytes) throws UnsupportedEncodingException {        byte[] encodeBase64 = Base64.getEncoder().encode(bytes);        return new String(encodeBase64, "UTF-8");    }}