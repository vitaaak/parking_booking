package com.kurgan.kursach.controllers;import com.kurgan.kursach.models.Card;import com.kurgan.kursach.models.Parking;import com.kurgan.kursach.service.CardService;import com.kurgan.kursach.service.ParkingService;import com.sun.org.apache.xpath.internal.operations.Mod;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.*;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import javax.crypto.KeyGenerator;import javax.crypto.SecretKey;import javax.servlet.http.HttpServletRequest;import java.math.BigInteger;import java.security.NoSuchAlgorithmException;import java.security.SecureRandom;@Controller@RequestMapping("/admin")public class AdminController {    @Autowired    private ParkingService parkingService;    @Autowired    private CardService cardService;    @GetMapping("/main")    public String main() {        return "admin/main";    }    @GetMapping("add_parking")    public String addParking() {        return "parking/add_parking";    }    @PostMapping("add_parking")    public String addParking(@ModelAttribute("addForm") Parking parking) {        parkingService.save(parking);        return "redirect:/admin/main";    }    @GetMapping("/parking")    public String manageParking(Model model){        model.addAttribute("parkings", parkingService.findAll());        return "admin/parking";    }    @PostMapping("/parking/udpate/{id}")    public String updateParking(@PathVariable("id") Long id, @ModelAttribute("places") int places){        Parking parking = parkingService.getById(id);        parking.setPlaces(places);        parkingService.save(parking);        return "redirect:/admin/parking";    }    @PostMapping("/parking/delete/{id}")    public String deleteParking(@PathVariable("id") Long id){        parkingService.deleteById(id);        return "redirect:/admin/parking";    }    @GetMapping("/card/create")    public String createCard(Model model) {        return "admin/card";    }    @PostMapping("/card/create")    public String createCard(@ModelAttribute("discount") String discount, HttpServletRequest request) throws NoSuchAlgorithmException {        Card card = new Card();        String s = "";        while ( s.length() != 18) {            KeyGenerator keyGen = KeyGenerator.getInstance("DES");            SecureRandom random = new SecureRandom();            keyGen.init(random);            SecretKey secretKey = keyGen.generateKey();            s = new BigInteger(1, secretKey.getEncoded()).toString(10);        }        card.setCard_code(s);        card.setDiscount(Integer.parseInt(discount));        cardService.save(card);        System.out.println(s);        String referer = request.getHeader("Referer");        return "redirect:" + referer;    }    @GetMapping("/card/edit")    public String editCards(Model model){        if (!model.containsAttribute("filteredCards")){            model.addAttribute("filteredCards", null);        }        model.addAttribute("cards", cardService.findAll());        return "admin/edit_card";    }    @PostMapping("card/edit")    public String findDiscount(@ModelAttribute("discount") int discount, RedirectAttributes redirectAttributes){        redirectAttributes.addFlashAttribute("filteredCards" , cardService.findAllByDiscount(discount));        return "redirect:/admin/card/edit";    }    @PostMapping("/card/udpate/{id}")    public String editCard(@PathVariable("id") Long id,@ModelAttribute("discount") int discount,                           HttpServletRequest request){        Card card = cardService.findById(id);        card.setDiscount(discount);        cardService.save(card);        String referer = request.getHeader("Referer");        return "redirect:" + referer;    }    @PostMapping("/card/delete/{id}")    public String deleteCard(@PathVariable("id") Long id, HttpServletRequest request){        cardService.deleteById(id);        String referer = request.getHeader("Referer");        return "redirect:" + referer;    }}