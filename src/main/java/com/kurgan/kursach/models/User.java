package com.kurgan.kursach.models;import lombok.AllArgsConstructor;import lombok.Getter;import lombok.NoArgsConstructor;import lombok.Setter;import javax.persistence.*;import java.io.UnsupportedEncodingException;import java.util.Base64;import java.util.Set;@Entity@Table(name = "users")@Setter@Getter@AllArgsConstructor@NoArgsConstructorpublic class User {    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    public Long user_id;    private String username;    private String password;    @Transient    transient private String confirmPassword;    @ManyToMany    @JoinTable(name = "user_roles", joinColumns = @JoinColumn(name = "user_id"),            inverseJoinColumns = @JoinColumn(name = "role_id"))    private Set<Role> roles;    public String name;    @OneToMany    @JoinTable(name = "user_car", joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "user_id"),            inverseJoinColumns = @JoinColumn(name = "car_id", referencedColumnName = "car_id"))    private Set<Car> cars;    public String surname;    public String mail;    @OneToOne    @JoinTable(name = "user_card", joinColumns = @JoinColumn(name = "user_id", referencedColumnName = "user_id"),            inverseJoinColumns = @JoinColumn(name = "card_id", referencedColumnName = "card_id"))    private Card card;    @Lob    public byte[] image;    public String parseImage() throws UnsupportedEncodingException {        if (image != null) {            byte[] encodeBase64 = Base64.getEncoder().encode(image);            return new String(encodeBase64, "UTF-8");        }else return "";    }}